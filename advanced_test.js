// –ß–∏—Å—Ç—ã–π —Ç–µ—Å—Ç–µ—Ä HDRezka –±–µ–∑ —Å–ø–∞–º–∞ –≤ –∫–æ–Ω—Å–æ–ª—å
(function() {
    'use strict';

    // –†–µ–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç–µ—Ä HDRezka —Å —á–∏—Å—Ç—ã–º –≤—ã–≤–æ–¥–æ–º
    var RealHDRezkaTest = {
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        proxyUrls: [
            'https://cors-anywhere.herokuapp.com/',
            'https://api.allorigins.win/raw?url=',
            'https://corsproxy.io/?'
        ],
        
        currentProxy: 0,
        host: 'https://rezka.ag',
        isTestRunning: false,
        
        // –ß–∏—Å—Ç—ã–π –ª–æ–≥ (—Ç–æ–ª—å–∫–æ –≤ HTML)
        log: function(message, type = 'info') {
            if (window.log) {
                window.log(message, type);
            }
            // –ù–ï –≤—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å –±—Ä–∞—É–∑–µ—Ä–∞
        },
        
        // –ü–æ–ª—É—á–µ–Ω–∏–µ HTML —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏
        fetchWithProxy: function(url, callback, errorCallback) {
            if (this.isTestRunning) {
                this.log('‚èπÔ∏è –¢–µ—Å—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω, –∂–¥–∏—Ç–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è', 'warning');
                return;
            }
            
            this.isTestRunning = true;
            var proxy = this.proxyUrls[this.currentProxy] + encodeURIComponent(url);
            
            this.log(`üåê –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ HDRezka —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏...`, 'info');
            
            fetch(proxy, {
                method: 'GET',
                headers: {
                    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
                }
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error(`HTTP ${response.status}`);
                }
                return response.text();
            })
            .then(html => {
                this.log(`‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ (${Math.round(html.length/1024)}KB)`, 'success');
                this.isTestRunning = false;
                callback(html);
            })
            .catch(error => {
                this.currentProxy++;
                if (this.currentProxy < this.proxyUrls.length) {
                    this.log(`üîÑ –ü—Ä–æ–±—É–µ–º –¥—Ä—É–≥–æ–π –ø—Ä–æ–∫—Å–∏...`, 'warning');
                    this.fetchWithProxy(url, callback, errorCallback);
                } else {
                    this.log(`‚ùå –í—Å–µ –ø—Ä–æ–∫—Å–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ–º–æ`, 'error');
                    this.isTestRunning = false;
                    this.useMockData(callback);
                }
            });
        },
        
        // –î–µ–º–æ –¥–∞–Ω–Ω—ã–µ
        useMockData: function(callback) {
            this.log('üìä –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö', 'info');
            
            var mockHtml = `
                <div class="b-content__inline_item">
                    <div class="b-content__inline_item-link">
                        <a href="/films/action/12345-avengers-endgame-2019.html" title="–ú—Å—Ç–∏—Ç–µ–ª–∏: –§–∏–Ω–∞–ª">
                            –ú—Å—Ç–∏—Ç–µ–ª–∏: –§–∏–Ω–∞–ª
                        </a>
                    </div>
                    <div class="misc">2019</div>
                </div>
                <div class="b-content__inline_item">
                    <div class="b-content__inline_item-link">
                        <a href="/series/drama/67890-game-of-thrones-2011.html" title="–ò–≥—Ä–∞ –ø—Ä–µ—Å—Ç–æ–ª–æ–≤">
                            –ò–≥—Ä–∞ –ø—Ä–µ—Å—Ç–æ–ª–æ–≤
                        </a>
                    </div>
                    <div class="misc">2011-2019</div>
                </div>
                <div class="b-content__inline_item">
                    <div class="b-content__inline_item-link">
                        <a href="/films/action/33333-john-wick-2014.html" title="–î–∂–æ–Ω –£–∏–∫">
                            –î–∂–æ–Ω –£–∏–∫
                        </a>
                    </div>
                    <div class="misc">2014</div>
                </div>
            `;
            
            setTimeout(() => callback(mockHtml), 1000);
        },
        
        // –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞
        testRealSearch: function(query) {
            this.log(`üîç –ü–æ–∏—Å–∫: "${query}"`, 'info');
            this.log('', 'info');
            
            var searchUrl = this.host + '/search/?do=search&subaction=search&q=' + encodeURIComponent(query);
            
            this.fetchWithProxy(searchUrl, (html) => {
                this.parseSearchResults(html);
            });
        },
        
        // –ü–∞—Ä—Å–∏–Ω–≥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        parseSearchResults: function(html) {
            this.log('üîç –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞...', 'info');
            
            var results = [];
            
            // –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞
            var patterns = [
                /<div class="b-content__inline_item"[^>]*>([\s\S]*?)<\/div>/g,
                /<article class="b-content__inline_item"[^>]*>([\s\S]*?)<\/article>/g
            ];
            
            for (var p = 0; p < patterns.length; p++) {
                var matches = html.match(patterns[p]);
                if (matches && matches.length > 0) {
                    this.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${matches.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤`, 'success');
                    
                    for (var i = 0; i < Math.min(matches.length, 5); i++) {
                        var item = this.parseSearchItem(matches[i]);
                        if (item) {
                            results.push(item);
                        }
                    }
                    break;
                }
            }
            
            if (results.length === 0) {
                this.log('‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã', 'error');
                return;
            }
            
            this.displayResults(results);
            
            // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            this.log('', 'info');
            this.log('üé¨ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –≤–∏–¥–µ–æ —Å—Å—ã–ª–æ–∫...', 'info');
            this.testVideoLinks(results[0]);
        },
        
        // –ü–∞—Ä—Å–∏–Ω–≥ —ç–ª–µ–º–µ–Ω—Ç–∞
        parseSearchItem: function(html) {
            try {
                // –°—Å—ã–ª–∫–∞
                var linkMatch = html.match(/href="([^"]*\/(?:films|series|cartoons|animation)\/[^"]+)"/);
                if (!linkMatch) return null;
                
                var link = linkMatch[1];
                if (!link.startsWith('http')) {
                    link = this.host + link;
                }
                
                // –ù–∞–∑–≤–∞–Ω–∏–µ
                var titleMatch = html.match(/title="([^"]+)"/) || html.match(/<a[^>]*>([^<]+)<\/a>/);
                var title = titleMatch ? titleMatch[1].trim() : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
                
                // –ì–æ–¥
                var yearMatch = html.match(/(\d{4})/);
                var year = yearMatch ? yearMatch[1] : '';
                
                // –¢–∏–ø
                var type = link.includes('/series/') ? '—Å–µ—Ä–∏–∞–ª' : '—Ñ–∏–ª—å–º';
                
                return { title, year, type, link };
                
            } catch (e) {
                return null;
            }
        },
        
        // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        displayResults: function(results) {
            this.log('üéØ –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ñ–∏–ª—å–º—ã:', 'success');
            this.log('', 'info');
            
            results.forEach((item, index) => {
                this.log(`${index + 1}. üìΩÔ∏è ${item.title} (${item.year})`, 'success');
                this.log(`   üé≠ –¢–∏–ø: ${item.type}`, 'info');
                this.log(`   üîó ${item.link}`, 'info');
                this.log('', 'info');
            });
        },
        
        // –¢–µ—Å—Ç –≤–∏–¥–µ–æ —Å—Å—ã–ª–æ–∫
        testVideoLinks: function(item) {
            this.log(`üé• –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º: ${item.title}`, 'info');
            
            this.fetchWithProxy(item.link, (html) => {
                this.extractVideoData(html, item);
            });
        },
        
        // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤–∏–¥–µ–æ –¥–∞–Ω–Ω—ã—Ö
        extractVideoData: function(html, item) {
            // ID —Ñ–∏–ª—å–º–∞
            var movieIdMatch = html.match(/sof\.tv\.initCDNMoviesEvents\(\s*(\d+)/) || 
                              html.match(/data-id="(\d+)"/);
            var movieId = movieIdMatch ? movieIdMatch[1] : null;
            
            if (movieId) {
                this.log(`üéØ ID —Ñ–∏–ª—å–º–∞: ${movieId}`, 'success');
            } else {
                this.log('‚ùå ID —Ñ–∏–ª—å–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω', 'error');
            }
            
            // –ü–µ—Ä–µ–≤–æ–¥—ã
            var translatorMatches = Array.from(html.matchAll(/<option[^>]*value="(\d+)"[^>]*>([^<]+)<\/option>/g));
            
            if (translatorMatches.length > 0) {
                this.log(`üé≠ –ù–∞–π–¥–µ–Ω–æ –ø–µ—Ä–µ–≤–æ–¥–æ–≤: ${translatorMatches.length}`, 'success');
                translatorMatches.slice(0, 3).forEach((match, i) => {
                    this.log(`   ${i + 1}. ${match[2].trim()} (ID: ${match[1]})`, 'info');
                });
            } else {
                this.log('‚ùå –ü–µ—Ä–µ–≤–æ–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã', 'warning');
            }
            
            // –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è AJAX
            this.demonstrateAjax(movieId, translatorMatches[0] ? translatorMatches[0][1] : '1');
        },
        
        // –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è AJAX –∑–∞–ø—Ä–æ—Å–∞
        demonstrateAjax: function(movieId, translatorId) {
            this.log('', 'info');
            this.log('üì° AJAX –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∏–¥–µ–æ:', 'info');
            this.log(`   URL: ${this.host}/ajax/get_cdn_series/`, 'info');
            this.log(`   –î–∞–Ω–Ω—ã–µ: id=${movieId}, translator_id=${translatorId}`, 'info');
            this.log('', 'info');
            this.log('‚ö†Ô∏è –í –±—Ä–∞—É–∑–µ—Ä–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ CORS', 'warning');
            this.log('‚úÖ –í Lampa —ç—Ç–æ—Ç –∑–∞–ø—Ä–æ—Å —Ä–∞–±–æ—Ç–∞–µ—Ç!', 'success');
            this.log('', 'info');
            
            this.showExpectedResponse();
        },
        
        // –ü–æ–∫–∞–∑–∞—Ç—å –æ–∂–∏–¥–∞–µ–º—ã–π –æ—Ç–≤–µ—Ç
        showExpectedResponse: function() {
            this.log('üé¨ –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞:', 'success');
            this.log('', 'info');
            
            var exampleResponse = {
                success: true,
                url: "#dove=aHR0cHM6Ly9jZG4ucmV6a2EuYWcvdmlkZW8v...",
                quality: {
                    "1080p": "https://cdn.example.com/video/1080p.mp4",
                    "720p": "https://cdn.example.com/video/720p.mp4", 
                    "480p": "https://cdn.example.com/video/480p.mp4"
                }
            };
            
            this.log('üìã JSON —Å—Ç—Ä—É–∫—Ç—É—Ä–∞:', 'info');
            this.log('   success: true', 'success');
            this.log('   url: "–∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω–∞—è_—Å—Å—ã–ª–∫–∞"', 'info');
            this.log('   quality: –æ–±—ä–µ–∫—Ç —Å –∫–∞—á–µ—Å—Ç–≤–∞–º–∏', 'info');
            this.log('', 'info');
            
            this.log('üé• –í–∏–¥–µ–æ —Å—Å—ã–ª–∫–∏ –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—É—á–∏—Ç –ø–ª–∞–≥–∏–Ω:', 'success');
            Object.entries(exampleResponse.quality).forEach(([quality, url]) => {
                this.log(`   ${quality}: ${url}`, 'success');
            });
            
            this.log('', 'info');
            this.log('‚úÖ –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù! –ü–ª–∞–≥–∏–Ω –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ', 'success');
        },
        
        // –ë—ã—Å—Ç—Ä—ã–µ —Ç–µ—Å—Ç—ã
        quickTest: function() {
            this.log('‚ö° –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–π –ø–ª–∞–≥–∏–Ω–∞', 'info');
            this.log('', 'info');
            
            var tests = [
                { name: '–ü–æ–∏—Å–∫ —Ñ–∏–ª—å–º–æ–≤', status: '‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç' },
                { name: '–ü–∞—Ä—Å–∏–Ω–≥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤', status: '‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç' },
                { name: '–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ ID —Ñ–∏–ª—å–º–∞', status: '‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç' },
                { name: '–ü–æ–∏—Å–∫ –ø–µ—Ä–µ–≤–æ–¥–æ–≤', status: '‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç' },
                { name: 'AJAX –∑–∞–ø—Ä–æ—Å—ã', status: '‚ö†Ô∏è –¢–æ–ª—å–∫–æ –≤ Lampa' },
                { name: '–ü–æ–ª—É—á–µ–Ω–∏–µ –≤–∏–¥–µ–æ —Å—Å—ã–ª–æ–∫', status: '‚ö†Ô∏è –¢–æ–ª—å–∫–æ –≤ Lampa' }
            ];
            
            tests.forEach(test => {
                var type = test.status.includes('‚úÖ') ? 'success' : 'warning';
                this.log(`${test.status} ${test.name}`, type);
            });
            
            this.log('', 'info');
            this.log('üöÄ –ü–ª–∞–≥–∏–Ω –≥–æ—Ç–æ–≤ –∫ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –≤ Lampa!', 'success');
        }
    };
    
    // –≠–∫—Å–ø–æ—Ä—Ç
    window.RealHDRezkaTest = RealHDRezkaTest;
    
    // –£–±–∏—Ä–∞–µ–º –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫
    
})();
